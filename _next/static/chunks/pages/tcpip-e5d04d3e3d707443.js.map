{"version":3,"file":"static/chunks/pages/tcpip-e5d04d3e3d707443.js","mappings":"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","sources":["webpack://_N_E/?5c61","webpack://_N_E/./src/pages/tcpip.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.68.0_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.68.0_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.68.0_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.68.0_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.68.0_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Text/Text.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.68.0_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Text/Text.view.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.68.0_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/src/components/Text/Text.styles.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/tcpip\",\n      function () {\n        return require(\"private-next-pages/tcpip.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/tcpip\"])\n      });\n    }\n  ","// cspell: ignore addrs\n\nimport { ICommandBarItemProps, MessageBar, Stack, StackItem, Text, TextField, Toggle } from \"@fluentui/react\";\nimport { autorun, makeAutoObservable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { useCallback, useEffect } from \"react\";\nimport { CommandBar, ExternalLink } from \"../components\";\nimport { GlobalState } from \"../state\";\nimport { asyncEffect, Icons, RouteStackProps } from \"../utils\";\n\nclass TcpIpState {\n    initial = true;\n    visible = false;\n    serviceListenAddresses: string[] | undefined = undefined;\n    servicePortEnabled = false;\n    servicePort: string = '';\n    persistPortEnabled = false;\n    persistPort: string | undefined = undefined;\n\n    constructor() {\n        makeAutoObservable(this, {\n            initial: false,\n            queryInfo: false,\n            applyServicePort: false,\n        });\n\n\n        autorun(() => {\n            if (GlobalState.device) {\n                if (this.initial && this.visible) {\n                    this.initial = false;\n                    this.queryInfo();\n                }\n            } else {\n                this.initial = true;\n            }\n        });\n    }\n\n    get commandBarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'refresh',\n                disabled: !GlobalState.device,\n                iconProps: { iconName: Icons.ArrowClockwise },\n                text: 'Refresh',\n                onClick: this.queryInfo as VoidFunction,\n            },\n            {\n                key: 'apply',\n                disabled: !GlobalState.device,\n                iconProps: { iconName: Icons.Save },\n                text: 'Apply',\n                onClick: this.applyServicePort,\n            }\n        ];\n    }\n\n    queryInfo = asyncEffect(async (signal) => {\n        if (!GlobalState.device) {\n            runInAction(() => {\n                this.serviceListenAddresses = undefined;\n                this.servicePortEnabled = false;\n                this.servicePort = '';\n                this.persistPortEnabled = false;\n                this.persistPort = undefined;\n            });\n            return;\n        }\n\n        const serviceListenAddresses = await GlobalState.device.getProp('service.adb.listen_addrs');\n        const servicePort = await GlobalState.device.getProp('service.adb.tcp.port');\n        const persistPort = await GlobalState.device.getProp('persist.adb.tcp.port');\n\n        if (signal.aborted) {\n            return;\n        }\n\n        runInAction(() => {\n            this.serviceListenAddresses = serviceListenAddresses !== '' ? serviceListenAddresses.split(',') : undefined;\n\n            if (servicePort) {\n                this.servicePortEnabled = !serviceListenAddresses && servicePort !== '0';\n                this.servicePort = servicePort;\n            } else {\n                this.servicePortEnabled = false;\n                this.servicePort = '5555';\n            }\n\n            if (persistPort) {\n                this.persistPortEnabled = !serviceListenAddresses && !servicePort;\n                this.persistPort = persistPort;\n            } else {\n                this.persistPortEnabled = false;\n                this.persistPort = undefined;\n            }\n        });\n    });\n\n    applyServicePort = async () => {\n        if (!GlobalState.device) {\n            return;\n        }\n\n        if (state.servicePortEnabled) {\n            await GlobalState.device.tcpip.setPort(Number.parseInt(state.servicePort, 10));\n        } else {\n            await GlobalState.device.tcpip.disable();\n        }\n    };\n}\n\nconst state = new TcpIpState();\n\nconst TcpIp: NextPage = () => {\n    useEffect(() => {\n        runInAction(() => {\n            state.visible = true;\n        });\n\n        return () => {\n            runInAction(() => {\n                state.visible = false;\n            });\n        };\n    });\n\n    const handleServicePortEnabledChange = useCallback((e, value?: boolean) => {\n        runInAction(() => { state.servicePortEnabled = !!value; });\n    }, []);\n\n    const handleServicePortChange = useCallback((e, value?: string) => {\n        if (value === undefined) {\n            return;\n        }\n        runInAction(() => state.servicePort = value);\n    }, []);\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>ADB over WiFi - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} />\n\n            <StackItem>\n                <MessageBar>\n                    <Text>\n                        For WebADB to wirelessly connect to your device,\n                        <ExternalLink href=\"https://github.com/yume-chan/ya-webadb/discussions/245#discussioncomment-384030\" spaceBefore spaceAfter>extra software</ExternalLink>\n                        is required.\n                    </Text>\n                </MessageBar>\n            </StackItem>\n            <StackItem>\n                <MessageBar >\n                    <Text>Your device will disconnect after changing ADB over WiFi config.</Text>\n                </MessageBar>\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"service.adb.listen_addrs\"\n                    disabled\n                    checked={!!state.serviceListenAddresses}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                />\n                {state.serviceListenAddresses?.map((address) => (\n                    <TextField\n                        key={address}\n                        disabled\n                        value={address}\n                        styles={{ root: { width: 300 } }}\n                    />\n                ))}\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"service.adb.tcp.port\"\n                    checked={state.servicePortEnabled}\n                    disabled={!GlobalState.device || !!state.serviceListenAddresses}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                    onChange={handleServicePortEnabledChange}\n                />\n                <TextField\n                    disabled={!GlobalState.device || !!state.serviceListenAddresses}\n                    value={state.servicePort}\n                    styles={{ root: { width: 300 } }}\n                    onChange={handleServicePortChange}\n                />\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"persist.adb.tcp.port\"\n                    disabled\n                    checked={state.persistPortEnabled}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                />\n                {state.persistPort && (\n                    <TextField\n                        disabled\n                        value={state.persistPort}\n                        styles={{ root: { width: 300 } }}\n                    />\n                )}\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(TcpIp);\n","import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n    delayedRender = true,\n    expandButtonProps,\n  } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            {delayedRender ? (\n              <DelayedRender>\n                <span>{children}</span>\n              </DelayedRender>\n            ) : (\n              // this span is probably not necessary, but preserving it for now in case anyone\n              // has styling that expects it to be present\n              <span>{children}</span>\n            )}\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={toggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n                {...expandButtonProps}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n","import {\n  HighContrastSelector,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nimport type { IStyle, ISemanticColors } from '../../Styling';\nimport type { IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst highContrastBackgroundColor: { [key: string]: string } = {\n  [MessageBarType.error]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.blocked]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.success]: 'rgba(48, 241, 73, 0.3)',\n  [MessageBarType.warning]: 'rgba(255, 254, 57, 0.3)',\n  [MessageBarType.severeWarning]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.info]: 'Window',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: highContrastBackgroundColor[messageBarType],\n            border: '1px solid WindowText',\n            color: 'WindowText',\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a:last-child': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MessageBarBase } from './MessageBar.base';\nimport { getStyles } from './MessageBar.styles';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nexport const MessageBar: React.FunctionComponent<IMessageBarProps> = styled<\n  IMessageBarProps,\n  IMessageBarStyleProps,\n  IMessageBarStyles\n>(MessageBarBase, getStyles, undefined, {\n  scope: 'MessageBar',\n});\n","import * as React from 'react';\nimport { BaseButton, Button, IButtonProps } from '../../Button';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IIconProps } from '../../Icon';\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBar {}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarProps extends React.HTMLAttributes<HTMLElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IMessageBar>;\n\n  /**\n   * The type of MessageBar to render.\n   * @defaultvalue MessageBarType.info\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * The actions you want to show on the other side.\n   */\n  actions?: JSX.Element;\n\n  /**\n   * A description of the message bar for the benefit of screen readers.\n   * @deprecated Use native prop `aria-label` instead.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Whether the message bar has a dismiss button and its callback.\n   * If null, we don't show a dismiss button.\n   * @defaultvalue null\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement | BaseButton | Button>) => any;\n\n  /**\n   * Determines if the message bar is multi lined.\n   * If false, and the text overflows over buttons or to another line, it is clipped.\n   * @defaultvalue true\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Aria label on dismiss button if onDismiss is defined.\n   */\n  dismissButtonAriaLabel?: string;\n\n  /**\n   * Determines if the message bar text is truncated.\n   * If true, a button will render to toggle between a single line view and multiline view.\n   * This prop is for single line message bars with no buttons only in a limited space scenario.\n   * @defaultvalue false\n   */\n  truncated?: boolean;\n\n  /**\n   * Aria label on overflow button if truncated is defined.\n   * @deprecated Use `expandButtonProps` instead.\n   */\n  overflowButtonAriaLabel?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the MessageBar.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\n\n  /**\n   * Custom icon prop to replace the dismiss icon.\n   * If unset, default will be the Fabric Clear icon.\n   */\n  dismissIconProps?: IIconProps;\n\n  /**\n   * Custom icon prop to replace the message bar icon.\n   * If unset, default will be the icon set by messageBarType.\n   */\n  messageBarIconProps?: IIconProps;\n\n  /**\n   *  Button props that can be applied to the expand button of the MessageBar.\n   */\n  expandButtonProps?: IButtonProps;\n\n  /**\n   * Custom role to apply to the MessageBar.\n   * @defaultvalue `alert` if `messageBarType` is `error`, `blocked`, or `severeWarning`;\n   * or `status` otherwise\n   */\n  role?: 'alert' | 'status' | 'none';\n\n  /**\n   * By default, MessageBar delay-renders its content within an internal live region to help ensure\n   * it's announced by screen readers. You can disable that behavior by setting this prop to `false`.\n   *\n   * If you set this prop to `false`, to ensure proper announcement you should either:\n   * - If appropriate, ensure that the `role` prop is set to `alert` (this will be done by default\n   *   if `messageBarType` is `error`, `blocked`, or `severeWarning`), OR\n   * - Set the `role` prop to `none` (to avoid nested `status` regions), wrap the whole MessageBar\n   *   in a `<div role=\"status\">` which is always rendered, and ensure that the MessageBar is\n   *   rendered either conditionally or with a delay.\n   * @default true\n   */\n  delayedRender?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyleProps {\n  /**\n   * Theme (provided through customization).\n   */\n  theme: ITheme;\n\n  /**\n   * Additional CSS class(es).\n   */\n  className?: string;\n\n  /**\n   * Type of the MessageBar.\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * Whether the MessageBar contains a dismiss button.\n   */\n  onDismiss?: boolean;\n\n  /**\n   * Whether the text is truncated.\n   */\n  truncated?: boolean;\n\n  /**\n   * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Whether the single line MessageBar is being expanded.\n   */\n  expandSingleLine?: boolean;\n\n  /**\n   * Whether the MessageBar contains any action elements.\n   */\n  actions?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyles {\n  /**\n   * Style set for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Style set for the element containing the icon, text, and optional dismiss button.\n   */\n  content?: IStyle;\n\n  /**\n   * Style set for the element containing the icon.\n   */\n  iconContainer?: IStyle;\n\n  /**\n   * Style set for the icon.\n   */\n  icon?: IStyle;\n\n  /**\n   * Style set for the element containing the text.\n   */\n  text?: IStyle;\n\n  /**\n   * Style set for the text.\n   */\n  innerText?: IStyle;\n\n  /**\n   * Style set for the optional dismiss button.\n   */\n  dismissal?: IStyle;\n\n  /**\n   * Style set for the icon used to expand and collapse the MessageBar.\n   */\n  expand?: IStyle;\n\n  /**\n   * Style set for the element containing the dismiss button.\n   */\n  dismissSingleLine?: IStyle;\n\n  /**\n   * Style set for the element containing the expand icon.\n   */\n  expandSingleLine?: IStyle;\n\n  /**\n   * Style set for the optional element containing the action elements.\n   */\n  actions?: IStyle;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport enum MessageBarType {\n  /** Info styled MessageBar */\n  info = 0,\n  /** Error styled MessageBar */\n  error = 1,\n  /** Blocked styled MessageBar */\n  blocked = 2,\n  /** SevereWarning styled MessageBar */\n  severeWarning = 3,\n  /** Success styled MessageBar */\n  success = 4,\n  /** Warning styled MessageBar */\n  warning = 5,\n}\n","import * as React from 'react';\nimport { createComponent } from '@fluentui/foundation-legacy';\nimport { TextView } from './Text.view';\nimport { TextStyles as styles } from './Text.styles';\nimport type { ITextProps } from './Text.types';\n\nexport const Text: React.FunctionComponent<ITextProps> = createComponent(TextView, {\n  displayName: 'Text',\n  styles,\n});\n\nexport default Text;\n","/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport { withSlots, getSlots } from '@fluentui/foundation-legacy';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\nimport type { ITextComponent, ITextProps, ITextSlots } from './Text.types';\n\nexport const TextView: ITextComponent['view'] = props => {\n  // eslint-disable-next-line eqeqeq\n  if (props.children == null) {\n    return null;\n  }\n\n  const { block, className, as: RootType = 'span', variant, nowrap, ...rest } = props;\n\n  const Slots = getSlots<ITextProps, ITextSlots>(props, {\n    root: RootType,\n  });\n\n  return <Slots.root {...getNativeProps(rest, htmlElementProperties)} />;\n};\n","import type { ITextComponent, ITextStyles, ITextStylesReturnType, ITextProps } from './Text.types';\nimport type { ITheme } from '../../Styling';\n\nexport const TextStyles: ITextComponent['styles'] = (props: ITextProps, theme: ITheme): ITextStylesReturnType => {\n  const { as, className, block, nowrap, variant } = props;\n  const { fonts, semanticColors } = theme;\n  const variantObject = fonts[variant || 'medium'];\n\n  return {\n    root: [\n      variantObject,\n      {\n        color: variantObject.color || semanticColors.bodyText,\n        display: block ? (as === 'td' ? 'table-cell' : 'block') : 'inline',\n        mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n        webkitFontSmoothing: variantObject.WebkitFontSmoothing,\n      },\n      nowrap && {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n      className,\n    ],\n  } as ITextStyles;\n};\n"],"names":["window","__NEXT_P","push","TcpIpState","initial","visible","serviceListenAddresses","undefined","servicePortEnabled","servicePort","persistPortEnabled","persistPort","queryInfo","asyncEffect","signal","GlobalState","runInAction","aborted","split","applyServicePort","state","Number","parseInt","makeAutoObservable","this","autorun","commandBarItems","key","disabled","iconProps","iconName","Icons","text","onClick","observer","useEffect","handleServicePortEnabledChange","useCallback","e","value","handleServicePortChange","Stack","RouteStackProps","Head","title","CommandBar","items","StackItem","MessageBar","Text","ExternalLink","href","spaceBefore","spaceAfter","Toggle","inlineLabel","label","checked","onText","offText","map","address","TextField","styles","root","width","onChange","ICON_MAP","getClassNames","classNamesFunction","getAnnouncementPriority","messageBarType","getRole","MessageBarBase","props","ref","useBoolean","expandSingleLine","toggleExpandSingleLine","labelId","useId","actions","className","children","overflowButtonAriaLabel","dismissIconProps","theme","onDismiss","isMultiline","truncated","dismissButtonAriaLabel","messageBarIconProps","role","delayedRender","expandButtonProps","nativeProps","classNames","expandIconProps","regionProps","actionsDiv","dismissButton","IconButton","dismissal","ariaLabel","content","iconContainer","Icon","css","icon","id","innerText","DelayedRender","expand","dismissSingleLine","displayName","GlobalClassNames","error","blocked","severeWarning","success","warning","multiline","singleline","dismissalSingleLine","expandingSingleLine","actionsSingleline","backgroundColor","highContrastBackgroundColor","iconColor","styled","semanticColors","fonts","SmallScreenSelector","dismissalAndExpandIconStyle","fontSize","height","lineHeight","color","messageText","selectors","dismissalAndExpandStyle","inset","highContrastStyle","outlineOffset","outline","borderColor","flexShrink","padding","medium","background","minHeight","display","wordBreak","messageLink","messageLinkHovered","border","flexDirection","minWidth","margin","flexGrow","small","marginRight","paddingLeft","overflow","whiteSpace","textOverflow","flexBasis","alignItems","marginLeft","marginBottom","scope","MessageBarType","createComponent","RootType","rest","Slots","as","block","nowrap","variant","variantObject","bodyText","mozOsxFontSmoothing","MozOsxFontSmoothing","webkitFontSmoothing","WebkitFontSmoothing"],"sourceRoot":""}